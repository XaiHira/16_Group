템플릿과 표준 탬플릿 라이브러리(STL)

>>함수 중복의 약점
	>> 중복 함수의 코드 중복
		>>#include <iostream>
			using namespace std;
			void myswap(int& a, int& b) {
			int tmp;
			tmp = a;
			a = b;
			b = tmp;
			}
			void myswap(double & a, double & b) {
			double tmp;
			tmp = a;
			a = b;
			b = tmp;
			}
			int main() {
			int a=4, b=5;
			myswap(a, b); // myswap(int& a, int& b) 호출
			cout << a << '\t' << b << endl;
			double c=0.3, d=12.5;
			myswap(c, d); // myswap(double& a, double& b) 호출
			cout << c << '\t' << d << endl;
			}
			
			>> void myswap(int& a, int& b) {
				int tmp;
				tmp = a;
				a = b;
				b = tmp;
				}
			// 두 함수는 매개 변수만 다르고 나머지 코드는 동일함
			//동일한 코드 중복 작성
			
			>> void myswap(double & a, double & b) {
				double tmp;
				tmp = a;
				a = b;
				b = tmp;
				}
			// 두 함수는 매개 변수만 다르고 나머지 코드는 동일함
			//동일한 코드 중복 작성

	>>일반화와 템플릿
		>>제네릭(generic) 또는 일반화
			>>함수나 클래스를 일반화
			>>매개변수 타입을 지정하여 틀에서 찍어 내듯이 함수나 클래스 코드를 생산하는 기법
		>>템플릿
			>>함수나 클래스를 일반화하는 C++ 도구
			>>template 키워드로 함수나 클래스 선언
				>>변수나 매개 변수의 탐입만 다르고, 코드 부분이 동일한 함수를 읿반화함.
			>>제네릭 타입 - 일반화를 위한 데이터 타입

		>>템츨릿 선언
			>>template <class T> 또는
			  template <typename T>
			  3 개의 제네릭 타입을 가진 템플릿 선언
			  template <class T1, class T2, class T3>\

		>>template <class T>
		  void myswap (T & a, T & b) {
		  T tmp;
		  tmp = a;
		  a = b;
		  b = tmp;
		  }	//템플릿을 이용한 제네릭 함수 myswap

	>>중복 함수들로부터 템플릿 만들기 사례
		>>void myswap(int & a, int & b) {
		  int tmp;
		  tmp = a;
		  a = b;
		  b = tmp;
		  }
			//중복함수들

		>>void myswap (double & a, double & b) {
		  double tmp;
		  tmp = a;
		  a = b;
		  b = tmp;
		  }
			//중복함수들
			
			>>제네릭 함수 만들기(일반화) 
			>>	(아래(vv))

			>>template <class T>
			//template >> 템플릿을 선언하는 키워드
			//class >> 제네릭 타입을 선언하는 키워드
			//T >> 제네릭 타입 T 선언
				
			void myswap (T & a, T & b) {
			T tmp;
			tmp = a;
			a = b;
			b = tmp;
			}
			//템플릿을 이용한 제네릭 함수

	>>템플릿으로 구체화
		>>구체화(Specialization)
			>>템플릿의 제네릭 타입에 구체적인 타입 지정
				>>템플릿 함수로 부터 구체화된 함수 코드 생성
			>>오류
				>>제네릭 타입에 구체적인 타입 지정 시 주의
					>>두 매개 변수 a, b의 제네릭 타입 동일
						>>template <class T> void myswap(T & a, T & b)			
				>>int s=4;
				double t=5;
				myswap(s, t); 	//두 개의 매개 변수의 타입이 서로 다름
						//컴파일 오류
						//myswap(int &, double &) 함수를 구체화할 수 없다
		>>장점
			>>함수 코드의 재사용
				>>높은 소프트웨어의 생산성과 유용성
		>>단점
			>>포팅에 취약
				>>컴파일러에 따라 지원하지 않을 수 있음
			>>컴파일 오류 메시지 빈약, 디버깅에 많은 어려움
		>>제네릭 프로그래밍
			>>generic programming
				>>일반화 프로그래밍
				>>제네릭 함수나 제네릭 클래스를 활용
				>>C++에서 STL제공
					>>STL = Standard Template Library
						>>표준 템플릿 라이브러리
							>>C++ 표준 라이브러리 중 하나
						>>많은 제네릭 클래스와 제네릭 함수 포함
							>>재발자는 이들을 이용하여 쉽게 응용 프로그램 작성
					>>STL 구성
						>>컨테이너
							>>템플릿 클래스
								>>데이커 담아두는 자료 구조 표현 클래스
								>>리스트, 큐, 스택, 맵, 셋, 벡터
						>>iterator
							>>컨테이너 원소에 대한 포인터
								>>컨테이너의 원소들을 순회하며 접근 위해 만들어진 컨테이너 원소 대한 포인터
						>>알고리즘
							>>템플릿 함수
								>>컨테이너 원소 복사, 검색, 삭제, 정렬 등 기능을 구현한 템플릿 함수
								>>컨테이너의 멤버 함수 아님
	
			>>보편화 추세
				>>JAVA, C# 등 많은 언어에서 활용
		>>문제점
			>>배영을 출력하는 print() 함수 문제
				>>
				#include <iostream>
				using namespace std;

				template <class T>
				void print(T array [], int n) {
					for(int i=0; i<n; i++)
						cout << array[i] << '\t';
						//T가 char로 구체화 되는 경우, 정수 1, 2, 3, 4, 5에 대한 그래필 문자출력
				cout << endl;
				}
				int main() {
					int x[] = {1,2,3,4,5};
					double d[5] = { 1.1, 2.2, 3.3, 4.4, 5.5 };
					print(x, 5); //print() 템플릿의 T가 int 타입으로 구체화
					print(d, 5); //print() 템플릿의 T가 int 타입으로 구체화

					char c[5] = {1, 2, 3, 4, 5};
					print(c, 5);
				}
				//char 구체화되면 숫자대신 문자 출력 << 문제점

		>>vector 컨테이너
			>>특징
				>>가변 길이 배열을 구현한 제네릭 클래스
					>>개발자가 벡터의 길이에 대한 고민X
				>>원소의 저장, 삭제, 검색 등 다양한 멤버 함수 지원
				>>벡터에 저장된 원소는 인덱스로 접근 가능
					>>인덱스 0부터 시작
		>>itertor 사용
			>>itertor
				>>반복자
				>>컨테이너의 원소 가리키는 포인터
			>>변수 선언
				>>구체적인 컨테이너를 지정하여 반복자 변수 생성
					>>vector<int>::iterator it;
					it = v.begin(); //it는 원소가 int 타입인 벡터의 원소에 대한 포인터
		>>map 컨테이너
			>>특징
				>>("키","값")의 쌍을 원소로 저장하는 제네릭 컨테이너
					>>동일한 '키'를 가진 원소가 중복 저장되면 오류발생
				>>'키'로 '값' 검색
				>>많은 응용에서 필요함
				>>#include <map>필요
			>>맵 컨테이너 생성 예
				>>영한 사전을 저장하기 위한 맵 컨테이너 생성 및 활용
					>>영어 단어와 한글 단어를 쌍으로 저장하고, 영어 단어로 검색
						>>맵 생성
							>>Map<string, string> dic; //키는 영어 단어, 값은 한글 단어
						>>원소 저장
							>>dic.insert(make_pair("love", "사랑")); //("love", "사랑") 저장
							>>dic["love"] = "사랑"; //("love", "사랑") 저장
						>>원소 검색
							>>string kor = dic["love"]; //kor은 "사랑"
							>>string kor = dic.at("love"); //kor은 "사랑"
		>>STL 알고리즘
			>>함수
				>>템플릿 함수
				>>전역 함수
					>>STL 컨테이너 클래스의 멤버 함수가 아님
				>>itertor와 함께 작동
			>>sort() 함수 사례
				>>두 개의 매개 변수
					>>첫 번째 매개 변수
						>>소팅을 시작한 원소 주소
					>>두 번째 매개 변수
						>> 소팅 범위의 마지막 원소 다음 주소
		>>auto 이용하여 쉬운 변수 선언
			>>C++에서 auto
				>>기능
					>>C++ 11부터 auto 선언의 의미 수정
						>>컴파일러에서 변수 선언문에서 추론 후 타입을 자동 언하도록 지시
					>>C++ 11이전까지는 스택에 할당되는 지역 변수를 선언하는 키워드
				>>장점
					>>복잡한 변수 선언을 간소하게, 긴 타입 선언 시 오타 줄임
			>>사용
				>>to pi = 3.14; // 3.14가 실수이므로 pi는 double 타입으로 선언됨
				>>auto n = 3; // 3이 정수이므로 n을 int 타입으로
				>>auto *p = &n; // 변수 p는 int* 타입으로 추론
	
				>>int n = 10;
				>>int & ref = n; // ref는 int에 대한 참조 변수
				>>auto ref2 = ref; // ref2는 int& 변수로 자동 선언
			>>다른 활용 사례
				>>함수의 리턴 타입으로 추론하여 변수 타입 선언
					>int square(int x) { return x*x; }
					>...
					>auto ret = square(3); // 변수 ret는 int 타입으로 추론
			>>STL 템플릿에 활용
				>>vector<int>iterator 타입의 변수 it를 auto이용하여 간단히 선언
					>>vector<int>::iterator it;
					>>for (it = v.begin(); it != v.end(); it++)
					>>cout << *it << endl;
						>>for (auto it = v.begin(); it != v.end(); it++)
						>>cout << *it << endl;
			>>람다
				>>람다 대수와 람다식
					>>람다 대수에서 람다식은 수학 함수를 단순하게 표현하는 기법
				>>C++ 람다
					>>익명의 함수 만드는 기능으로 C++11에서 도입
						>>람다식, 람다 함수로 불림
						>>C#, JAVA, 파인선, 자바스크립트 등 많은 언어들이 도입 되어 있음
			>>C++에서 람다식 선언
				>>C++.의 람다식의 구성
					>>4 부분으로 구성
						>>캡쳐 리스트
							>>람다식에서 사용하고자 하는 함수 바깥의 변수 목록
						>>매개변수 리스트
							>>보통 함수의 매개변수 리스트와 함수
						>>리턴 타입
						>>함수 바디
							>>람다식의 함수 코드
