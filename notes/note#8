C++ 입출력 시스템

>>스트림(stream)
	>>데이터의 흐름, 혹은 데이타를 전송하는 소프트웨어 모듈
		>>흐르는 시내와 유사한 개념
	>>스트림의 양 끝에는 프로그램과 장치 연결
		>>보낸 순서대로 데이터 전달
		>>입출력 기본 단위 : 바이트
>>C++ 스트림 종류
	>>입력 스트림
		>>입력 장치, 네트워크, 파일로부터 데이터를 프로그램으로 전달하는 스트림
	>>출력 스트림
		>>프로그램에서 출력되는 데이터를 출력 장치, 네트워크, 파일로 전달하는 스트림
>>C++ 입출력 스트림은 버퍼를 가짐
>>키 입력 스트림의 버퍼
	>>목적
		>>입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장
		>>키 입력 도중 수정 가능
			>><Backspace> 키가 입력되면 이전에 입력된 키를 버퍼에서 지움
	>>C++ 응용 프로그램은 사용자의 키 입력이 끝난 시점에서 읽음
		>><Enter> 키 : 키 입력의 끝을 의미
		>><Enter> 키가 입력된 시점부터 키 입력 버퍼에서 프로그램이 읽기 시작
>>스크린 출력 스트림 버퍼
	>>목적
		>>프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장
		>>출력 장치를 반복적으로 사용하는 비효율성 개선
	>>버퍼가 꽉 차거나 강제 출력 명령 시에 출력 장치에 출력
>>입출력 방식 2가지
	>>스트림 입출력 방식(stream I/O)
		>>스트림 버퍼를 이용한 입출력 방식
		>>입력된 키는 버퍼에 저장
			>><Enter>키가 입력되면 프로그램이 버퍼에서 읽어가는 방식
		>>출력되는 데이터는 일차적으로 스트림 버퍼에 저장
			>>버퍼가 꽉 차거나, ‘\n’을 만나거나,  강제 출력 명령의 경우에만 버퍼가 출력 장치에 출력
	>>저 수준 입출력 방식(raw level console I/O)
		>>키가 입력되는 즉시 프로그램에게 키 값 전달
			>><Backspace>키 그 자체도 프로그램에게 바로 전달
			>>게임 등 키 입력이 즉각적으로 필요한 곳에 사용
		>>프로그램이 출력하는 즉시 출력 장치에 출력
		>>컴파일러마다 다른 라이브러리나 API 지원
			>>C++ 프로그램의 호환성 낮음
	>>C++ 표준은 스트림 입출력 방식만 지원
		>>스트림 입출력은 모든 표준 C++ 컴파일러에 의해 컴파일됨
		>>높은 호환성
>>ostream 멤버 함수 
	>>ostream& put(char ch)
		>>문자를 스트림에 출력
	>>ostream& write(char*str, int n)
		>>배열에 있는 n개의 문자를 스트림에 출력
	>>ostream& flush()
		>>현재 스트림 버퍼에 있는 내용 강제 출력
>>istream 멤버 함수 – 문자 입력, get() 함수		
	>>int get()
		>>입력 스트림에 문자를 읽어 리턴, 오류, EOF를 접촉 
			>> 1(EOF) 리턴
	>>istream& get(char& ch)
		>>입력을 만나면 ch 저장
		>>오류 EOF 만나면 스트림 내부 오류 플러그 세팅
>>문자열 입력
	>>istream& get(char*s, int n)
		>>n-1개의 문자를 배열 s에 저장
		>>마지막에 \0 문자 삽입
		>>입력 도중 \n을 만나면 \0 삽입 후 리턴
	>>get()이 읽는 도중 <Enter>키(‘\n’)을 만날 때
		>>읽기를 중단하고 리턴
		>><Enter> 키(‘\n’)는 스트림 버퍼에 남아 있음
			>>다시 get()으로 문자열 읽기를 시도
				>>입력 스트림에 남은 ‘\n’키를 만나게 되어바로 리턴. 
					>>프로그램은 무한 루프에 빠질 수 있음
			>>이때 이 문제를 해결
				>> cin.get()이나  cin.ignore(1);를 통해 문자 1개(‘\n’)를 스트림에서 읽어 버려야 함.

>>한 줄 읽기
	>>istream& get(char*s, int n, char delim='\n')
		>>최대 n-1개의 문자를 읽어 s에 저장
			>> 마지막에 '\0' 문자 삽입
				>>입력 도중 delim에 저장 된 구분 문자를 만나면 지금 까지 문자를 배열 s에 저장 후 리턴
	>>istream& getline(char*s, int n, char delim= '\n')
		>>get()과 동일
			>>차이점은 delim에 지정된 구분 문자를 스트림에 제거
>>입력 문자 건너 띄기와 문자 개수 알아내기
	>>istream& ignore(int n=1, int delim = EOF)
		>>입력 스트립에서 n개 문자 제거
		>>delim 문자를 만나면 delim문자 제거 리턴
	>>int gcount()
		>>최근 입력 스트림에서ㅗ 읽은 바이트 수(문자의 개수)리턴
		>>enter 키도 개수에 포함
>>포맷 입출력
	>>C++에서도 입출력 시 포맷 지정 가능
		>>C 언어의 printf()와 유사
	>>포맷 입출력 방법 3 가지
		>>포맷 플래그
			>>입출력 스트림에서 입출력 형식을 지정하기 위한 플래그
				>>long setf(long flags)
					>>flags를 스트림의 포맷 플러그로 설정
					>>이전 플러그 리턴
				>>long unsetf(long flags)
					>>flags에 설정된 비트 값에 따라 스트림의 포맷 플러그를 해제
					>>이전 플러그 리턴
		>>포맷 함수
			>>활용
				>>int width(int minwidth)
					>>출력되는 필드의 최소너비를 minWidth로 설정
					>>이전 너비값 리턴
				>>char fill(char cFill)
					>>필드의 빈칸을 cFill 문자로 채우도록 지정
					>>이전 문자값 리턴
				>>int precision(int np)
					>>출력 되는 수의 유효 숫자 자리수를 np개로 설정
					>>정수 와 소수점이하 모두 포함
					>>소수점(.)은 제외
		>>조작자
			>>manipulator, 스트림 조작자(stream manipulator)
			>>조작자는 함수
				>>C++ 표준 라이브러리에 구현된 조작자 : 입출력 포맷 지정 목적
				>>개발자 만의 조작자 작성 가능 : 다양한 목적
				>>매개 변수 없는 조작자와 매개 변수를 가진 조작자로 구분
			>>조작자는 항상 << 나 >> 연산자와 함께 사용됨
>>삽입 연산자(<<)
		>>insertion operator, 삽입자라고도 부름
			>> << 연산자는 C++의 기본 연산자 : 정수 시프트 연산자
		>>ostream 클래스에 중복 작성되어 있음
		>>개발자가 작성한 클래스의 객체를 << 연산자로 출력
>>추출 연산자(>>)
	>>extraction operator
		>> >> 연산자는 C++의 기본 연산자 : 정수 시프트 연산자
	>>ostream 클래스에 중복 작성되어 있음
	>>추출 연산자의 실행 과정
		>>삽입 연산자의 실행 과정과 유사하므로 생략
	>>개발자가 작성한 클래스의 객체에 >> 연산자로 입력





