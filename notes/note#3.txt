예제 3-1

#include <iostream>
using namespace std;

class Circle {

public:

int radius;

double getArea();

};

double Circle::getArea() {

return 3.14*radius*radius;

}




int main() {

Circle donut; //  Circle을 이용하여 dount를 사용을 하면 됩니다.

donut.radius = 1; // donut의 반지름은 1로 설정을 하고 radius로 변수 접근을 합시다.

double area = donut.getArea(); // double의 area를 선언을 하고 이 dount.getArea가 도넛의 면적을 계산하는 코로 area에 getArea의 계산의 정보를 지정합니다.

cout << "donut 면적은 " << area << endl; //출력문을 만듭니다.


Circle pizza; // 이번에는 피자의 면적을 계산합니다.


pizza.radius = 30; // pizza의 반지름을 30이거


area = pizza.getArea(); //double선언을 되어있는 이 area를  pizza.getArea가 도넛의 면적을 계산하는 코로 area에 getArea의 계산의 정보를 지정합니다.

area는 도넛에서 double로 선언이 되어있어 바로 사용해도 된다고 생각을 합니다


cout << "pizza 면적은 " << area << endl;



3-2

#include <iostream>
using namespace std; 

class Rectangle { // Rectangle 클래스 선언을 합니다.
클래스는 선언을 하고 rectangle를 다른걸로 해도 될까요?

넵 클래스의 명은 임의로 지정을 하고 사용을 해도 됩니다.
어염풋이 기억나서...

public:
int w;
int h; //이번에는 사각형의 면적을 구하는 거기 때문에 변수가 2개 필요해서 2개 선언

int getArea(); // 면적을 계산하여 리턴하는 함수
};
int Rectangle::getArea() {
return width*height; // 사각형의 식을 새우는 리턴 식
}

int main() {
Rectangle rect;
rect.w = 3; 
rect.h = 5;
cout << "사각형의 면적은 " << rect.getArea() << endl;
}


3-3
이건 쫌 고민과 간단한 문제였습니다.

int r 을 정해 버리면 다른곳에 사용할때 문제가 될 수가 있고,
위임 생성자를 사용하지 않고 일일이 초기화하려면 코드가 너무 길어져서
여러 생성자에 중복되는 부분을 정해두고 사용할 수 있게하여 코드를 간소화가 가능하다.

#include <iostream>
using namespace std;
class Circle {
public:
int radius;
Circle(); // 매개 변수 없는 생성자
Circle(int r); // 매개 변수 있는 생성자
double getArea();
};
Circle::Circle() {
radius = 1;
cout << "반지름 " << radius << " 원 생성" << endl;
}
Circle::Circle(int r) {
radius = r;
cout << "반지름 " << radius << " 원 생성" << endl;
}
double Circle::getArea() {
return 3.14*radius*radius;
}

여기까지 코드를 완성을 하였는데 왜 실행이 안되는지 고민을 하였습니다.
그리고 int main을 안적은 것을 확인.

int main() {
Circle donut; // 도넛은 매개 변수가 없고요.
double area = donut.getArea();
cout << "donut 면적은 " << area << endl;

Circle pizza(30); // 피자는 30의 매개 변수가 있습니다.
area = pizza.getArea();
cout << "pizza 면적은 " << area << endl;

확실히 더 매개 생성자를 이용을 하면은 반복되는 것을 한 개로 만들 수가 있어서 효율적이고 좀더 보기가 좋은 거 같아요.

3-4

#include <iostream>
using namespace std;
class Circle {
public:
int radius;

Circle(); // 위임 생성자
Circle(int r); // 타겟 생성자

double getArea();
};

Circle::Circle() : Circle(1) { } // 위임 생성자
Circle::Circle(int r) { // 타겟 생성자

radius = r;
cout << "반지름 " << radius << " 원 생성" << endl;
}
double Circle::getArea() {
return 3.14*radius*radius;
}

int main() {
Circle donut; // 매개 변수 없는 생성자 호출
double area = donut.getArea();
cout << "donut 면적은 " << area << endl;
Circle pizza(30); // 매개 변수 있는 생성자 호출
area = pizza.getArea();
cout << "pizza 면적은 " << area << endl;
}

3-3과 차이가 크네요.. 

3-3은 매개 생성자 이용해서 반복되는 코드를 줄이고 이번 3-4도 똑같지만 완전하게 똑같은 건 아니고 
똑같다고 느껴져요. 위임생성자는  매개 생성자를 한 번더 축약을 시킨거 같다고 할까. 
좀 더 간략해진거 같습니다.


일단 위임 생성자를 먼저 선언을 하고서 그다음 타겟 생성자를 선언 합니다. 위임생성자랑 타겟 생성자는 
같이 사용해야 한다는 것을 주의해야 할 거 같아요.

3-6
int main() {
Rectangle rect1;
Rectangle rect2(3, 5);
Rectangle rect3(3);
if(rect1.isSquare()) cout << "rect1은 정사각형이다." << endl;
if(rect2.isSquare()) cout << "rect2는 정사각형이다." << endl;
if(rect3.isSquare()) cout << "rect3는 정사각형이다." << endl;
}

이 문제를 보고 처음에 변수 rect 123 3개를 선언 해야하는 줄 알았습니다.

맞았다라고 할까 일딴 rect을 선언을 하는 것이 아닌 밑과 높이의 정수 변수 2개를 선언을 해야되는 겁니다.
출력이 정사각형을 찾기에 if문을 사용을 하고요.

그리고 3-3의 생성자를 이용을 하여 3개의 생성자를 만듭니다.


class Rectangle {
public:
int width, height;
Rectangle();
Rectangle(int w, int h);
Rectangle(int area);
bool isSquare();
};
Rectangle::Rectangle() { // 이 생성자는 w=h=1인 rect1을 위한 생성자
width = hight = 1;
}
Rectangle::Rectangle(int w, int h) { //  이 생성자는 3, 5인 rect2을 위한 생성자
width = w; height = h;
}
Rectangle::Rectangle(int area) { //  이 생성자는 3인 rect3을 위한 생성자
width = height = area;
}
//정사각형이면 출력

bool Rectangle::isSquare() {
if(width == height) return true;
else return false;//
}

int main() {
Rectangle rect1;
Rectangle rect2(3, 5);
Rectangle rect3(3);// 위의 생성자를 출력을 위해서 불러옴.


if(rect1.isSquare()) cout << "rect1은 정사각형이다." << endl ;
if(rect2.isSquare()) cout << "rect2는 정사각형이다." << endl;
if(rect3.isSquare()) cout << "rect3는 정사각형이다." << endl;
} // int main에 출력문을 작성을 하면됨.

